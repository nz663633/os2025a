// hello.go
package main

import "fmt"

func main() {
    fmt.Println("Hello, Go!")
}

-------------------------------------------------------------

< Go 명령어 >
go mod init 프로젝트폴더명 : 모듈 초기화(생성) -> 현재 폴더에 go.mod 파일 생성
go run hello.go : hello.go 파일 실행
go build hello.go : 디렉터리를 빌드(hello.exe라는 실행파일 생성)


< 기타 >
.gitignore 파일 생성 (*.exe) : git에서 특정 파일이나 폴더를 추적하지 않도록 설정하는 파일
package : 모든 go 파일은 package절로 시작해야함
import : go 파일에서 참조하는 모든 패키지는 반드시 가져와야함
func : 함수를 정의
Println : 인자들을 공백으로 연결해서 출력하고 자동으로 줄바꿈을 추가
          형식 지정자 해석 X
Printf : 포맷 문자열을 사용해 출력 형식을 직접 지정
         %d, %s, %f, %v 같은 형식 지정자를 사용해서 출력 모양을 제어
         줄바꿈을 자동으로 추가하지 않으므로 필요시 \n을 포맷 문자열에 추가해야함
{} : 코드의 범위를 구분
; : 문장 끝에 필요(직접 쓸 필요 거의 없음)
:= : 변수 선언과 초기화 동시에 가능(자동 타입 추론)

float64 : 부동 소수점 숫자 타입으로 소수부를 가진 숫자 값을 저장
nil : 값이 존재하지 않거나 아무 것도 가리키지 않을 때 사용


< 표준 패키지 >
bufio : 버퍼 입출력, 입력 읽기와 출력 쓰기에 사용
fmt : 문자열, 숫자 등 다양한 데이터를 형식화(format)해서 입출력
log : 프로그램 실행 중 에러 메시지 기록 (오류 기록)
os : 파일, 디렉토리, 환경변수, 표준 입출력 등 os와 관련된 기능 제공
strconv : 문자열과 숫자 사이 변환
strings : 문자열 탐색, 자르기, 변경, 비교 등 (문자열 처리)
reflect : 데이터의 타입 정보를 확인


< 변수 선언(variable declaration) >
var 변수명 변숫값의타입
변수를 선언하고 나면 = 기호를 사용해 해당 타입의 값을 할당할 수 있음
변수 선언과 동시에 값 할당가능 (동시에 값 여러 개 할당가능)
값 할당 안하면 제로 값(zero value)으로 초기화


< 타입 변환 >
수학 및 비교연산에는 동일한 타입의 값만 사용가능


-------------------------------------------------------------

package main

import "fmt"

func main() {
    number := 7
    fmt.Printf("Git/Github for %d\n", number)
}

위와 같은 코드에서 fmt.Println을 쓰면 에러가 나는 이유
: Println은 단순히 인자를 공백으로 구분해서 출력하고 줄바꿈만 해줌
-> %d, %s, %f, %v 같은 형식 지정자(format specifier)는 fmt.Printf를 사용해야함!


package main

import "fmt"

func main() {
    name := "Go developers"
    fmt.Println("Git/Github for", name)
}

-------------------------------------------------------------

package main

import "fmt"

func main() {
    totalPrice := 500
    fmt.Println(totalPrice)
}

package main

import "fmt"

func main() {
    var 64f float64  // 변수명은 숫자로 시작할 수 없음 -> 오류
    fmt.Println(64f, reflect.TypeOf(64f))  // reflect 패키지를 import 안함 -> 오류
}

-------------------------------------------------------------

package main

import (
    "bufio"
    "fmt"
    "log"
    "os"
    "strconv"
    "strings"
)

func main() {
    // shadowing : 변수 이름이 기존의 식별자를 덮어쓰는 것
    // var fmt string = "inha"  -> 오류
    // var int int = 7  -> 오류
    // fmt.Println(int)  -> 에러

    r := bufio.NewReader(os.Stdin)  // 키보드로부터 텍스트를 읽어오기 위함
    i, err := r.ReadString('\n')  // err은 ReadString() 함수가 반환한 두 번째 값(에러 정보)를 담는 변수
    if err != nil {  // 에러가 발생한다면?
        log.Fatal(err)  // report the error and exit the program
    }

    i = strings.TrimSpace(i)  // TrimSpace: 문자열의 앞뒤 공백 제거
    score, err := strconv.ParseFloat(i, 64)  // ParseFloat: 문자열을 실수로 변환,
                                             // i : 변환할 문자열, 64 : 변환할 실수의 비트 크기
    if err != nil {  // 문자열을 실수로 변환에 실패한다면?
        log.Fatal(err)  // 에러 메시지 출력 후 프로그램 종료
    }

    var pf string
    if score >= 60 {
        pf = "Pass"
    } else {
        pf = "Fail"
    }

    fmt.Println(pf, score)
    
}

-------------------------------------------------------------

package main

import (
    "fmt"
    "reflect"
)

func main() {
    var f64 float64
    var str string
    var i32 int32
    var b bool
    fmt.Println(f64, reflect.TypeOf(f64))  // float64 (기본값 0)
    fmt.Println(str, reflect.TypeOf(str))  // string (기본값 "")
    fmt.Println(i32, reflect.TypeOf(i32))  // int32 (기본값 0)
    fmt.Println(b, reflect.TypeOf(b))  // bool (기본값 false)
}

-------------------------------------------------------------

package main

import (
    "fmt"
    "math"
    "strings"
)

func main() {
    fmt.Println(math.Ceil(2.71))  // Ceil : 올림 함수 (2.71 -> 3.0)
    fmt.Println(strings.Title("head first go"))
}

-------------------------------------------------------------

package main

import (
    "fmt"
    "strings"
)

func main() {
    broken := "G# r#cks!"
    replacer := strings.NewReplacer("#", "o")  // 문자열 교체 도구 객체를 만드는 함수
    fixed := replacer.Replace(broken)  // Replace 매서드를 호출해 치환활 문자열을 전달
    fmt.Println(fixed)
}

-------------------------------------------------------------

package main

import (
    "fmt"
    "math/rand"
)

func main() {
    target := rand.Intn(100) + 1  // rand.Intn(100) : 0~99 사이의 정수 생성
    fmt.Println(target)
}

-------------------------------------------------------------

