ls : 현재 위치의 파일 목록 조회
ls -a : 숨긴 파일을 포함한 모든 항목 표시
ls -m : 각 항목들을 쉼표로 구분하여 표시
ls -l : 각 항목의 상세 정보들을 함께 표시

cd(change directory) : 디렉터리로 이동
cd . : 현재 디렉터리
cd .. : 한 단계 상위 디렉터리로 이동
cd - : 이전 경로로 이동
cd ~ : 홈 디렉터리로 이동

touch : 0바이트의 빈 파일 생성 또는 파일이나 디렉토리의 최근 업데이트 일자를 현재 시간으로 변경

cat : 파일의 내용을 화면에 출력

clear : 현재 사용 중인 터미널 화면 지우기

echo "출력할 내용" >> 파일명
(echo "# os2025a" >> README.md)
echo : c에서 printf와 같은 역할

rm : 지우기(remove)
rm 파일명 : 해당 파일 삭제

history : 사용자가 실행한 명령어들의 기록 출력

less : 파일 내용을 한 화면씩 출력

cp 원본파일 복사본파일 : 원본파일을 복사본파일로 복사

--------------------------------------------------------

$ git init : git 초기화, git으로 버전관리를 할 경로에서 사용, .git 폴더 생성
$ git status : 현재 폴더의 상태를 보여줌
$ git commit : 현재 상태 저장 (변경된 내용 저장)
$ git commit -m "[메시지명]" : 커밋 메시지 [메시지명]을 붙여 커밋
$ git commit -a -m "[메시지명]" : 메시지 [메시지명]을 붙여서 스테이징과 커밋을 동시에 진행
$ git commit --amend -m "수정할 커밋 메시지" : 직전 커밋 메시지 수정

$ git add : 커밋하기 전, 인덱스에 먼저 커밋할 파일을 추가
$ git add . : 변경된 모든 파일을 한 번에 추가

$ git log : 커밋 이력 확인
$ git log . : 현재 폴더 확인
$ git log .. : 상위 폴더 확인
$ git log --oneline : 커밋 로그에서 한 줄에 한 커밋씩 출력

commit 966f6bacadbe608d3c49c2213f206a2e6021a1d3 : 해당 커밋의 hash code 확인
$ git checkout (hash code 전체 혹은 7자리) : 지정한 커밋 해시로 이동
$ git checkout [브랜치명] : [브랜치명]으로 이동

$ git config --global user.name "[사용자명]" : 깃 환경에서 사용자 이름을 [사용자명]으로 지정
$ git config --global user.email "[사용자이메일명]" : 깃 환경에서 사용자 이메일을 [사용자이메일명]으로 지정
$ git config --list : 현재 적용된 모든 설정값 출력
(user.name=심현지
user.email=hyunjisim3@gmail.com
core.editor=code --wait
color.ui=auto
merge.tool=vimdiff)

--------------------------------------------------------

$ git branch -M main : master에서 main으로 변경
$ git branch [브랜치명] : 새로운 브랜치 [브랜치명] 생성
$ git branch -d [브랜치명] : 해당 브랜치 삭제

$ git remote add origin https://github.com/nz663633/os2025a.git(내 깃허브 주소)
$ git remote add origin [브랜치 이름]
: 원격 저장소에 연결
$ git remote -v : 원격 저장소에 연결됐는지 확인
(origin  https://github.com/nz663633/os2025a.git (fetch)
origin  https://github.com/nz663633/os2025a.git (push))
$ git remote remove origin : 기존 원격 저장소(remote)의 연결 삭제

$ git push : 원격 저장소에 업로드
$ git push -u origin main : 로컬(main)브랜치를 원격(origin)저장소로 업로드 (초기설정)
$ git push -f origin main : 강제로 업로드
$ git pull : 원격 저장소 브랜치에서 데이터를 가져오고
             그 데이터를 자동으로 현재 작업하는 코드와 merge시킴

$ git clone [원격 저장소 주소] : 새 폴더를 만들어서 원격 저장소를 복제
$ git clone [원격 저장소 주소] . : 새 폴더를 생성하지 않고 현재 폴더 안에
                                  저장소 내용을 복제(현재 폴더가 비어있어야 함)

--------------------------------------------------------

$ git reset [커밋 해시] : 지정한 커밋 해시로 이동하고 커밋을 취소
$ git reset reset HEAD^ : 현재 HEAD의 이전 커밋으로 되돌리기
$ git reset --hard HEAD~n : 현재로부터 n번째 이전 커밋으로 되돌리기
(n : 최근 커밋부터 삭제할 갯수)

$ git fetch : 원격 저장소의 커밋들을 로컬 저장소로 가져옴

$ git merge [브랜치명] : [브랜치명]을 main 브랜치에 병합